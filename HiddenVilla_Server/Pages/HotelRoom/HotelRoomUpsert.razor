@page "/hotel-room/create"
@page "/hotel-room/edit/{id:int}"

@using Business.Repository.IRepository
@using HiddenVilla_Server.Service.IService
@using Models
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelImagesRepository HotelImagesRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRunTime
@inject IFileUpload FileUpload

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">
        @Title Hotel Room
    </h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                    <DataAnnotationsValidator />
                    <div class="form-group my-2">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="() => HotelRoomModel.Name" />
                    </div>
                    <div class="form-group my-2">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="() => HotelRoomModel.Occupancy" />
                    </div>
                    <div class="form-group my-2">
                        <label>RegularRate</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="() => HotelRoomModel.RegularRate" />
                    </div>
                    <div class="form-group my-2">
                        <label>SqFt</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
                    </div>
                    <div class="form-group my-2">
                        <label>Details</label>
                        <InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>
                    </div>
                    <div class="form-group my-2">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">
                            @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                            {
                                int serial = 1;
                                foreach (var roomImage in HotelRoomModel.ImageUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="room-image" style="background: url('@roomImage') 50% 50%; ">
                                            <span class="room-image-title">@serial</span>
                                        </div>

                                        <button type="button" class="btn btn-outline-danger btn-block mt-4">
                                            Delete
                                        </button>
                                    </div>
                                    serial++;
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group my-2">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    public string Title { get; set; } = "Create";
    public HotelRoomDTO HotelRoomModel { get; set; } = new HotelRoomDTO();
    private HotelRoomImageDTO RoomImage { get; set; } = new HotelRoomImageDTO();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Convert.ToInt32(Id));

            if(HotelRoomModel != null && HotelRoomModel.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(s => s.RoomImageUrl).ToList();
            }
        }
        else
        {
            Title = "Create";
            HotelRoomModel = new HotelRoomDTO();
        }
    }

    protected async Task HandleHotelRoomUpsert()
    {
        try
        {
            if (HotelRoomModel.Id != null && Title.Equals("Update"))
            {
                var updateRoom = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                await JsRunTime.InvokeVoidAsync("ShowToastr", "success", "Successfully updated!");
            }
            else
            {
                var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name);

                if (roomDetailsByName != null)
                {
                    await JsRunTime.InvokeVoidAsync("ShowToastr", "error", "Room name is already taken!");
                    return;
                }

                var createRoom = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await AddHotelRoomImage(createRoom);
                await JsRunTime.InvokeVoidAsync("ShowToastr", "success", "Successfully created!");
            }
        }
        catch (Exception e)
        {
            await JsRunTime.InvokeVoidAsync("ShowToastr", "error", e.Message);
        }
        NavigationManager.NavigateTo("hotel-room");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension == ".jpg" ||
                        fileInfo.Extension == ".png" ||
                        fileInfo.Extension == ".jpeg")
                    {
                        var uploadImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadImagePath);
                    }
                    else
                    {
                        await JsRunTime.InvokeVoidAsync("ShowToastr", "error", "Please select the .jpg, .png & .jpeg images");
                        return;
                    }
                }

                if (images != null && images.Count > 0)
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    {
                        HotelRoomModel.ImageUrls = images;
                    }
                    else
                    {
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls = images;
                    }
                }
                else
                {
                    await JsRunTime.InvokeVoidAsync("ShowToastr", "error", "Image uploading failed");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            await JsRunTime.InvokeVoidAsync("ShowToastr", "error", ex.Message);
            return;
        }
    }

    private async Task AddHotelRoomImage(HotelRoomDTO roomDetails)
    {
        foreach (var imageUrl in HotelRoomModel.ImageUrls)
        {
            RoomImage = new HotelRoomImageDTO()
            {
                RoomId = roomDetails.Id,
                RoomImageUrl = imageUrl
            };
            await HotelImagesRepository.CreateHotelRoomImage(RoomImage);
        }
    }
}
